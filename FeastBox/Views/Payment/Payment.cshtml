@{
    ViewData["Title"] = "Payment";
    var totalAmount = ViewBag.TotalAmount;
}

<div class="container text-center mt-5">
    <h1 class="my-4">Payment Page</h1>
    <p class="lead">The total amount for your order is:</p>
    <h2 class="text-success display-4">@totalAmount.ToString("C")</h2>

    <form asp-action="ProcessPayment" method="post" id="paymentForm" class="shadow-lg p-4 bg-white rounded">
        <div class="form-group">
            <label for="cardNumber">Card Number</label>
            <input type="text" class="form-control" id="cardNumber" name="cardNumber" placeholder="Enter your card number" required />
        </div>

        <div class="form-row">
            <div class="form-group col-md-6">
                <label for="expiryDate">Expiry Date</label>
                <input type="text" class="form-control" id="expiryDate" name="expiryDate" placeholder="MM/YY" required />
            </div>

            <div class="form-group col-md-6">
                <label for="cvv">CVV</label>
                <input type="text" class="form-control" id="cvv" name="cvv" placeholder="Enter CVV" required />
            </div>
        </div>

        <button type="submit" class="btn btn-primary btn-lg btn-block mt-4">Pay Now</button>
    </form>
</div>

<script>
    document.getElementById("paymentForm").addEventListener("submit", function (event) {
        event.preventDefault();

        const cardNumber = document.getElementById("cardNumber").value;
        const expiryDate = document.getElementById("expiryDate").value;
        const cvv = document.getElementById("cvv").value;

        const cardNumberRegex = /^\d{16}$/;
        if (!cardNumberRegex.test(cardNumber)) {
            Swal.fire('Error', 'Card Number must be 16 digits long.', 'error');
            return;
        }

        const [month, year] = expiryDate.split('/');
        const currentDate = new Date();
        const currentYear = currentDate.getFullYear() % 100;
        const currentMonth = currentDate.getMonth() + 1;

        if (!month || !year || month < 1 || month > 12 || year < currentYear || (year == currentYear && month < currentMonth)) {
            Swal.fire('Error', 'Expiry Date must be a future date in MM/YY format.', 'error');
            return;
        }

        const cvvRegex = /^\d{3,4}$/;
        if (!cvvRegex.test(cvv)) {
            Swal.fire('Error', 'CVV must be 3 or 4 digits long.', 'error');
            return;
        }

        Swal.fire({
            title: 'Processing Payment...',
            text: 'Please wait while we process your payment.',
            icon: 'info',
            allowOutsideClick: false,
            showLoaderOnConfirm: true,
            preConfirm: () => {
                return new Promise((resolve) => {
                    setTimeout(() => {
                        resolve();
                    }, 2000);
                });
            }
        }).then((result) => {
            if (result.isConfirmed) {
                event.target.submit();
            }
        });
    });
</script>

<style>
    body {
        background: linear-gradient(to right, #f5f5f5, #ffffff);
    }

    .container {
        max-width: 600px;
        margin-top: 50px;
    }

    h1, h2 {
        color: #333;
    }

    .btn-primary {
        background-color: #ff8a00;
        border: none;
    }

        .btn-primary:hover {
            background-color: #e52e71;
            color: white;
        }

    .form-control {
        border: 1px solid #ced4da;
        border-radius: 0.25rem;
        transition: border-color 0.3s;
    }

        .form-control:focus {
            border-color: #ff8a00;
            box-shadow: 0 0 0 0.2rem rgba(255, 138, 0, 0.25);
        }

    .shadow-lg {
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }
</style>
